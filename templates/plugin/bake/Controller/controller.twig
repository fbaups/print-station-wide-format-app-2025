{#
/**
 * Controller bake template file
 *
 * Allows templating of Controllers generated from bake.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
<?php
declare(strict_types=1);

namespace {{ namespace }}\Controller{{ prefix }};

{% if plugin or prefix %}
use {{ baseNamespace }}\Controller\AppController;
{% endif %}
use Cake\Event\EventInterface;
use Exception;

/**
 * {{ name }} Controller
 *
{% if defaultModel %}
 * @property \{{ defaultModel }} ${{ name }}
{% endif %}

{%- for component in components %}
{% set classInfo = Bake.classInfo(component, 'Controller/Component', 'Component') %}
 * @property {{ classInfo.fqn }} ${{ classInfo.name }}
{% endfor %}

{%- if 'index' in actions %}
 * @method \{{ namespace }}\Model\Entity\{{ entityClassName }}[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
{% endif %}
 */
class {{ name }}Controller extends AppController
{
    /**
     * Initialize controller
     *
     * @return void
     * @throws Exception
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->set('typeMap', $this->{{ name }}->getSchema()->typeMap());
{% if components or helpers %}{{ "\n" }}
    {% for component in components %}
            $this->loadComponent('{{ component }}');
    {% endfor %}

    {% if helpers %}
        $this->viewBuilder()->setHelpers({{ Bake.exportArray(helpers)|raw }});
    {% endif %}
    {% if actions|length %}{{ "\n" }}{% endif %}
{% endif %}
{{ "\n" }}    }{{ "\n" }}
    /**
    * @param EventInterface $event
    * @return void
    */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);

        //prevent some actions from needing CSRF Token validation for AJAX requests
        //$this->FormProtection->setConfig('unlockedActions', ['edit']);
        $this->FormProtection->setConfig('unlockedActions', ['index']); //allow index for DataTables index refresh

        //prevent all actions from needing CSRF Token validation for AJAX requests
        //if ($this->request->is('ajax')) {
        //    $this->FormProtection->setConfig('validate', false);
        //}
    }
{{ "\n" }}
{%- for action in actions %}
{% if loop.index > 1 %}{{ "\n" }}{% endif %}
    {{- element('Bake.Controller/' ~ action) -}}
{% endfor %}
    {{- element('Bake.Controller/preview') -}}

}
